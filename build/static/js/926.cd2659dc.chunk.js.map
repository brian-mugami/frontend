{"version":3,"file":"static/js/926.cd2659dc.chunk.js","mappings":"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","sources":["components/CustomerPaymentComponents/CustomerPaymentsList.js","pages/CustomerPaymentsPage/AllCustomerPayments.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { DataGrid, GridToolbar } from \"@mui/x-data-grid\";\r\n\r\nconst PAGE_SIZE = 10;\r\n\r\nconst columns = [\r\n  {\r\n    field: \"payment\",\r\n    headerName: \"Payment\",\r\n    renderCell: (params) => (\r\n      <Link to={`./${params.row.id}`}>{params.row.id}</Link>\r\n    ),\r\n    width: 200,\r\n  },\r\n  {\r\n    field: \"customer\",\r\n    headerName: \"Customer\",\r\n    valueGetter: (params) => params.row.receipt.customer.customer_name || \"\",\r\n    width: 200,\r\n  },\r\n  {\r\n    field: \"receiptNumber\",\r\n    headerName: \"Receipt Number\",\r\n    width: 200,\r\n\r\n    valueGetter: (params) => params.row.receipt.receipt_number || \"\",\r\n  },\r\n  {\r\n    field: \"approvalStatus\",\r\n    headerName: \"Approval Status\",\r\n    width: 150,\r\n    valueGetter: (params) => params.row.approval_status|| \"\",\r\n\r\n   \r\n  },\r\n  {\r\n    field: \"paymentDate\",\r\n  headerName: \"Payment Date\",\r\n    width: 200,\r\n    valueGetter: (params) => params.row.date || \"\",\r\n  },\r\n  {\r\n    field: \"receiptDate\",\r\n    headerName: \"Receipt Date\",\r\n    width: 200,\r\n    valueGetter: (params) => params.row.receipt.date || \"\",\r\n  },\r\n  {\r\n    field: \"actions\",\r\n    headerName: \"Actions\",\r\n    width: 300,\r\n\r\n    renderCell: (params) => (\r\n      <div className=\"flex\">\r\n        <div className=\"pr-2\">\r\n          <span className=\"inline-flex items-center rounded-md bg-red-50 px-2 py-1 text-xs font-medium text-red-700 ring-1 ring-inset ring-red-600/10\">\r\n            <Link to={`./${params.row.id}/approve`}>Approve</Link>\r\n          </span>\r\n        </div>\r\n        <div className=\"pr-2\">\r\n          <span className=\"inline-flex items-center rounded-md bg-blue-50 px-2 py-1 text-xs font-medium text-blue-700 ring-1 ring-inset ring-blue-700/10\">\r\n            <Link to={`./${params.row.id}/accounting`}>Accounting</Link>\r\n          </span>\r\n        </div>\r\n        <div>\r\n          <span className=\"inline-flex items-center rounded-md bg-blue-50 px-2 py-1 text-xs font-medium text-blue-700 ring-1 ring-inset ring-blue-700/10\">\r\n            <Link to={`./${params.row.id}/reject`}>Reject</Link>\r\n          </span>\r\n        </div>\r\n      </div>\r\n    ),\r\n  },\r\n];\r\nfunction CustomerPaymentsList({ payments }) {\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const startIndex = (currentPage - 1) * PAGE_SIZE;\r\n  const endIndex = startIndex + PAGE_SIZE;\r\n  const paginatedPayments = payments.slice(startIndex, endIndex);\r\n  const totalPages = Math.ceil(payments.length / PAGE_SIZE);\r\n\r\n  const handlePageChange = (params) => {\r\n    setCurrentPage(params.page + 1);\r\n  };\r\n\r\n  return (\r\n    <div style={{ height: 500, width: \"100%\" }}>\r\n      <h2 className=\"text-lg font-semibold mb-4\">Payments</h2>\r\n      <DataGrid\r\n        rows={paginatedPayments}\r\n        columns={columns}\r\n        pagination\r\n        pageSize={PAGE_SIZE}\r\n        onPageChange={handlePageChange}\r\n        rowCount={payments.length}\r\n        paginationMode=\"server\"\r\n        components={{\r\n          Toolbar: GridToolbar,\r\n        }}\r\n      />\r\n      {totalPages > 1 && (\r\n        <div className=\"flex justify-center mt-4\">\r\n          <nav className=\"inline-flex rounded-md shadow\">\r\n            <ul className=\"flex\">\r\n              {Array.from({ length: totalPages }, (_, index) => (\r\n                <li key={index}>\r\n                  <button\r\n                    className={`px-4 py-2 ${\r\n                      currentPage === index + 1\r\n                        ? \"bg-gray-900 text-white\"\r\n                        : \"bg-white text-gray-700\"\r\n                    } font-medium`}\r\n                    onClick={() => setCurrentPage(index + 1)}\r\n                  >\r\n                    {index + 1}\r\n                  </button>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </nav>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CustomerPaymentsList;\r\n","import React, { Suspense } from \"react\";\r\nimport CustomerPaymentsList from \"../../components/CustomerPaymentComponents/CustomerPaymentsList\";\r\nimport { getAuthToken } from \"../../util/Auth\";\r\nimport { Await, defer, json, useRouteLoaderData } from \"react-router-dom\";\r\n\r\nfunction AllCustomerPayments() {\r\n    const {payments} = useRouteLoaderData(\"customer-payments\")\r\n  return (\r\n    <Suspense fallback={<p>Loading....</p>}>\r\n        <Await resolve={payments}>\r\n        {(loadedPayments) => <CustomerPaymentsList payments={loadedPayments} />}\r\n        </Await>\r\n  </Suspense>);\r\n}\r\nexport default AllCustomerPayments;\r\n\r\nasync function AllCustomerPaymentsLoader() {\r\n  const token = getAuthToken();\r\n  const response = await fetch(\"https://flask-inventory.onrender.com/customer/payment\", {\r\n    method: \"GET\",\r\n    headers: {\r\n      Authorization: \"Bearer \" + token,\r\n      \"Access-Control-Allow-Origin\": \"*\",\r\n    },\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw json({ message: \"No payments loaded\" }, { status: 500 });\r\n  }\r\n\r\n  const resData = await response.json();\r\n  console.log(resData)\r\n  return resData;\r\n}\r\n\r\nexport async function loader(){\r\n    return defer({\r\n        payments : AllCustomerPaymentsLoader()\r\n    })\r\n}\r\n"],"names":["columns","field","headerName","renderCell","params","to","row","id","width","valueGetter","receipt","customer","customer_name","receipt_number","approval_status","date","className","payments","useState","currentPage","setCurrentPage","startIndex","endIndex","paginatedPayments","slice","totalPages","Math","ceil","length","style","height","DataGrid","rows","pagination","pageSize","onPageChange","page","rowCount","paginationMode","components","Toolbar","GridToolbar","Array","from","_","index","onClick","useRouteLoaderData","Suspense","fallback","Await","resolve","loadedPayments","AllCustomerPaymentsLoader","token","getAuthToken","fetch","method","headers","Authorization","response","ok","json","message","status","resData","console","log","loader","defer"],"sourceRoot":""}