{"version":3,"file":"static/js/926.189318e6.chunk.js","mappings":"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","sources":["components/CustomerPaymentComponents/CustomerPaymentsList.js","pages/CustomerPaymentsPage/AllCustomerPayments.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\n\r\nconst PAGE_SIZE = 10;\r\n\r\nfunction CustomerPaymentsList({ payments }) {\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n\r\n  const startIndex = (currentPage - 1) * PAGE_SIZE;\r\n  const endIndex = startIndex + PAGE_SIZE;\r\n  const paginatedPayments = payments.slice(startIndex, endIndex);\r\n\r\n  const totalPages = Math.ceil(payments.length / PAGE_SIZE);\r\n\r\n  const handlePageChange = (params) => {\r\n    setCurrentPage(params.page + 1);\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      field: \"payment\",\r\n      headerName: \"Payment\",\r\n      flex: 1,\r\n      renderCell: (params) => (\r\n        <Link to={`./${params.row.id}`}>{params.row.id}</Link>\r\n      ),\r\n    },\r\n    {\r\n      field: \"customer\",\r\n      headerName: \"Customer\",\r\n      flex: 1,\r\n      valueGetter: (params) => params.row.receipt.customer.customer_name || \"\",\r\n    },\r\n    {\r\n      field: \"receiptNumber\",\r\n      headerName: \"Receipt Number\",\r\n      flex: 1,\r\n      valueGetter: (params) => params.row.receipt.receipt_number || \"\",\r\n    },\r\n    {\r\n      field: \"approved\",\r\n      headerName: \"Approved\",\r\n      flex: 1,\r\n      valueGetter: (params) =>\r\n        params.row.approved === true ? \"approved\" : \"Not Approved\",\r\n    },\r\n    {\r\n      field: \"paymentDate\",\r\n      headerName: \"Payment Date\",\r\n      flex: 1,\r\n      valueGetter: (params) => params.row.date || \"\",\r\n    },\r\n    {\r\n      field: \"receiptDate\",\r\n      headerName: \"Receipt Date\",\r\n      flex: 1,\r\n      valueGetter: (params) => params.row.receipt.date || \"\",\r\n    },\r\n    {\r\n      field: \"actions\",\r\n      headerName: \"Actions\",\r\n      flex: 1,\r\n      renderCell: (params) => (\r\n        <div className=\"flex\">\r\n          <div className=\"pr-2\">\r\n            <span className=\"inline-flex items-center rounded-md bg-red-50 px-2 py-1 text-xs font-medium text-red-700 ring-1 ring-inset ring-red-600/10\">\r\n              <Link to={`./${params.row.id}/approve`}>Approve</Link>\r\n            </span>\r\n          </div>\r\n          <div>\r\n            <span className=\"inline-flex items-center rounded-md bg-blue-50 px-2 py-1 text-xs font-medium text-blue-700 ring-1 ring-inset ring-blue-700/10\">\r\n              <Link to={`./${params.row.id}/accounting`}>Accounting</Link>\r\n            </span>\r\n          </div>\r\n          <div>\r\n            <span className=\"inline-flex items-center rounded-md bg-blue-50 px-2 py-1 text-xs font-medium text-blue-700 ring-1 ring-inset ring-blue-700/10\">\r\n              <Link to={`./${params.row.id}/reject`}>Reject</Link>\r\n            </span>\r\n          </div>\r\n        </div>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div style={{ height: 400, width: \"100%\" }} className=\"overscroll-contain\">\r\n      <h2 className=\"text-lg font-semibold mb-4\">Payments</h2>\r\n      <DataGrid\r\n      className=\"overscroll-contain\"\r\n\r\n        rows={paginatedPayments}\r\n        columns={columns}\r\n        pagination\r\n        pageSize={PAGE_SIZE}\r\n        onPageChange={handlePageChange}\r\n        rowCount={payments.length}\r\n        paginationMode=\"server\"\r\n      />\r\n      {totalPages > 1 && (\r\n        <div className=\"flex justify-center mt-4\">\r\n          <nav className=\"inline-flex rounded-md shadow\">\r\n            <ul className=\"flex\">\r\n              {Array.from({ length: totalPages }, (_, index) => (\r\n                <li key={index}>\r\n                  <button\r\n                    className={`px-4 py-2 ${\r\n                      currentPage === index + 1\r\n                        ? \"bg-gray-900 text-white\"\r\n                        : \"bg-white text-gray-700\"\r\n                    } font-medium`}\r\n                    onClick={() => setCurrentPage(index + 1)}\r\n                  >\r\n                    {index + 1}\r\n                  </button>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </nav>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CustomerPaymentsList;\r\n","import React, { Suspense } from \"react\";\r\nimport CustomerPaymentsList from \"../../components/CustomerPaymentComponents/CustomerPaymentsList\";\r\nimport { getAuthToken } from \"../../util/Auth\";\r\nimport { Await, defer, json, useRouteLoaderData } from \"react-router-dom\";\r\n\r\nfunction AllCustomerPayments() {\r\n    const {payments} = useRouteLoaderData(\"customer-payments\")\r\n  return (\r\n    <Suspense fallback={<p>Loading....</p>}>\r\n        <Await resolve={payments}>\r\n        {(loadedPayments) => <CustomerPaymentsList payments={loadedPayments} />}\r\n        </Await>\r\n  </Suspense>);\r\n}\r\nexport default AllCustomerPayments;\r\n\r\nasync function AllCustomerPaymentsLoader() {\r\n  const token = getAuthToken();\r\n  const response = await fetch(\"https://flask-inventory.onrender.com/customer/payment\", {\r\n    method: \"GET\",\r\n    headers: {\r\n      Authorization: \"Bearer \" + token,\r\n      \"Access-Control-Allow-Origin\": \"*\",\r\n    },\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw json({ message: \"No payments loaded\" }, { status: 500 });\r\n  }\r\n\r\n  const resData = await response.json();\r\n  return resData;\r\n}\r\n\r\nexport async function loader(){\r\n    return defer({\r\n        payments : AllCustomerPaymentsLoader()\r\n    })\r\n}\r\n"],"names":["payments","useState","currentPage","setCurrentPage","startIndex","endIndex","paginatedPayments","slice","totalPages","Math","ceil","length","columns","field","headerName","flex","renderCell","params","to","row","id","valueGetter","receipt","customer","customer_name","receipt_number","approved","date","className","style","height","width","DataGrid","rows","pagination","pageSize","onPageChange","page","rowCount","paginationMode","Array","from","_","index","onClick","useRouteLoaderData","Suspense","fallback","Await","resolve","loadedPayments","AllCustomerPaymentsLoader","token","getAuthToken","fetch","method","headers","Authorization","response","ok","json","message","status","resData","loader","defer"],"sourceRoot":""}