{"version":3,"file":"static/js/693.8644649b.chunk.js","mappings":"4OAekC,SAEnBA,IAAgB,OAAH,qCAe3B,OAf2B,0BAA5B,6FACgC,OAAtBC,GAAQC,EAAAA,EAAAA,MAAc,SAELC,MAAM,gCAAiC,CAC1DC,OAAQ,MACRC,QAAS,CACL,cAAiB,UAAWJ,KAElC,OALY,IAARK,EAAQ,QAMDC,GAAG,CAAC,EAAF,mBACLC,EAAAA,EAAAA,MAAK,CAACC,QAAS,2BAA2B,CAACC,OAAQ,MAAK,wBAExCJ,EAASE,OAAM,QAAxB,OAAPG,EAAO,yBACNA,GAAO,6CAErB,sBAEM,SAAeC,IAAS,OAAH,wBAI3B,8CAJM,mFACU,OADV,KACKC,EAAAA,MAAK,SACQb,IAAe,OAAxB,OAAwB,kBAAhCc,SAAS,EAAD,kFAEf,sBAvBD,UAVA,WACI,IAAOA,GAAYC,EAAAA,EAAAA,oBAAmB,oBAA/BD,SACP,OACI,SAAC,EAAAE,SAAQ,CAACC,UAAU,cAAGC,MAAO,CAACC,UAAW,UAAU,SAAC,gBAAgB,UACjE,SAAC,EAAAC,MAAK,CAACC,QAASP,EAAS,SACpB,SAACQ,GAAc,OAAK,SAAC,IAAY,CAACR,SAAUQ,EAAgBC,MAAM,wBAAwB,KAI3G,C","sources":["pages/InventoryAdjustmentAccountPages/AllInvAdjAccountPage.js"],"sourcesContent":["import { Suspense } from \"react\";\r\nimport { defer, json,Await, useRouteLoaderData,  } from \"react-router-dom\";\r\nimport { getAuthToken } from \"../../util/Auth\";\r\nimport AccountsList from \"../../components/AccountComponents/AccountsList\";\r\n\r\nfunction InvAdjAccountsPage(){\r\n    const {accounts} = useRouteLoaderData('inv-adj-accounts');\r\n    return(\r\n        <Suspense fallback={<p style={{textAlign: 'center'}}>Loading....</p>}>\r\n            <Await resolve={accounts}>\r\n                {(loadedAccounts) => <AccountsList accounts={loadedAccounts} title=\"Inventory Adjustment\"/>}\r\n            </Await>\r\n        </Suspense>\r\n    )\r\n}\r\nexport default InvAdjAccountsPage;\r\n\r\nasync function AccountLoader(){\r\n    const token = getAuthToken()\r\n   \r\n    const response = await fetch('/inventory-adjustment/account', {\r\n        method: \"get\",\r\n        headers: {\r\n            'Authorization': 'Bearer '+ token\r\n        }\r\n    })\r\n    if(!response.ok){\r\n        throw json({message: \"The response was not ok\"},{status: 500})\r\n    }else{\r\n        const resData = await response.json()\r\n        return resData\r\n    }\r\n};\r\n\r\nexport async function loader(){\r\n    return (defer({\r\n        accounts:  await AccountLoader()\r\n    }))\r\n}\r\n"],"names":["AccountLoader","token","getAuthToken","fetch","method","headers","response","ok","json","message","status","resData","loader","defer","accounts","useRouteLoaderData","Suspense","fallback","style","textAlign","Await","resolve","loadedAccounts","title"],"sourceRoot":""}