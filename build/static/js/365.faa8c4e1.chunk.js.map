{"version":3,"file":"static/js/365.faa8c4e1.chunk.js","mappings":"2MAOO,SAAeA,EAAO,GAAD,+BAwE3B,8CAxEM,gHAE4C,GAFpBC,EAAO,EAAPA,QACvBC,EAAe,IAAIC,IAAIF,EAAQG,KAAKF,aAG7B,WAFPG,EAAOH,EAAaI,IAAI,SAAW,UAER,aAATD,EAAmB,sBACnCE,EAAAA,EAAAA,MAAK,CAAEC,QAAS,oBAAsB,CAAEC,OAAQ,MAAO,KAAD,kBAE3CR,EAAQS,WAAW,KAAD,EAanC,GAbIC,EAAI,OAEJC,EAAU,CACdC,WAAYF,EAAKL,IAAI,SACrBQ,UAAWH,EAAKL,IAAI,SACpBS,MAAOJ,EAAKL,IAAI,SAChBU,UAAWL,EAAKL,IAAI,aACpBW,UAAWN,EAAKL,IAAI,cAGhBY,EAAY,CAChBH,MAAOJ,EAAKL,IAAI,SAChBa,SAAUR,EAAKL,IAAI,aAGR,UAATD,EAAgB,kCACKe,MAAM,6CAA8C,CACzEC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUP,KACpB,KAAD,GANY,GAARQ,EAAQ,OAOA,CAAD,0CACJnB,EAAAA,EAAAA,MAAK,CAAEC,QAAS,+BAAiC,CAAEC,OAAQ,OAAM,WAElD,MAApBiB,EAASjB,OAAc,0CAClBiB,GAAQ,yBAGKA,EAASnB,OAAO,KAAD,GAUrC,OAVMoB,EAAO,OACPC,EAAeD,EAAQC,aACvBC,EAAgBF,EAAQE,cAE9BC,aAAaC,QAAQ,eAAgBH,GACrCE,aAAaC,QAAQ,gBAAiBF,IAChCG,EAAa,IAAIC,MACZC,SAASF,EAAWG,WAAa,IAC5CL,aAAaC,QAAQ,aAAcC,EAAWI,eAE9C,mBACOC,EAAAA,EAAAA,UAAS,UAAQ,WAGb,aAAThC,EAAmB,kCACEe,MAAM,2DAA4D,CACvFC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUb,KACpB,KAAD,GANY,GAOU,OAPlBc,EAAQ,QAODjB,OAAc,0CAClBiB,GAAQ,WAGO,MAApBA,EAASjB,OAAc,0CAClBiB,GAAQ,WAEZA,EAASY,GAAG,CAAD,sBACR/B,EAAAA,EAAAA,MAAK,CAAEC,QAAS,2BAA6B,CAAEC,OAAQ,MAAO,KAAD,6BAG9D4B,EAAAA,EAAAA,UAAS,yCAAuC,6CAE1D,sBAED,UA9EA,WACE,OAAO,SAAC,IAAQ,GAClB,C","sources":["pages/UserPages/AdminRegisterPage.js"],"sourcesContent":["import AuthForm from \"../../components/UserComponents/Register\";\r\nimport { json, redirect } from \"react-router-dom\";\r\n\r\nfunction AdminRegisterPage() {\r\n  return <AuthForm />;\r\n}\r\n\r\nexport async function action({ request }) {\r\n  const searchParams = new URL(request.url).searchParams;\r\n  const mode = searchParams.get(\"mode\") || \"login\";\r\n\r\n  if (mode !== \"login\" && mode !== \"register\") {\r\n    throw json({ message: \"Route not found.\" }, { status: 404 });\r\n  }\r\n  const data = await request.formData();\r\n\r\n  const regData = {\r\n    first_name: data.get(\"fname\"),\r\n    last_name: data.get(\"lname\"),\r\n    email: data.get(\"email\"),\r\n    password1: data.get(\"password1\"),\r\n    password2: data.get(\"password2\"),\r\n  };\r\n\r\n  const loginData = {\r\n    email: data.get(\"email\"),\r\n    password: data.get(\"password\"),\r\n  };\r\n\r\n  if (mode === \"login\") {\r\n    const response = await fetch(\"https://flask-inventory.onrender.com/login\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(loginData),\r\n    });\r\n    if (!response) {\r\n      return json({ message: \"Could not authenticate user\" }, { status: 500 });\r\n    }\r\n    if (response.status === 401) {\r\n      return response;\r\n    }\r\n\r\n    const resData = await response.json();\r\n    const access_token = resData.access_token;\r\n    const refresh_token = resData.refresh_token;\r\n\r\n    localStorage.setItem(\"access_token\", access_token);\r\n    localStorage.setItem(\"refresh_token\", refresh_token);\r\n    const expiration = new Date();\r\n    expiration.setHours(expiration.getHours() + 24);\r\n    localStorage.setItem(\"expiration\", expiration.toISOString());\r\n\r\n    // manage tokens\r\n    return redirect(\"/home\");\r\n  }\r\n\r\n  if (mode === \"register\") {\r\n    const response = await fetch(\"https://flask-inventory.onrender.com/register/user/admin\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(regData),\r\n    });\r\n    if (response.status === 409) {\r\n      return response;\r\n    }\r\n\r\n    if (response.status === 417) {\r\n      return response;\r\n    }\r\n    if (!response.ok) {\r\n      throw json({ message: \"Could not register user\" }, { status: 500 });\r\n    }\r\n\r\n    return redirect(\"/auth/login/admin/kindred?mode=login\");\r\n  }\r\n}\r\n\r\nexport default AdminRegisterPage;\r\n"],"names":["action","request","searchParams","URL","url","mode","get","json","message","status","formData","data","regData","first_name","last_name","email","password1","password2","loginData","password","fetch","method","headers","body","JSON","stringify","response","resData","access_token","refresh_token","localStorage","setItem","expiration","Date","setHours","getHours","toISOString","redirect","ok"],"sourceRoot":""}