{"version":3,"file":"static/js/926.3db97c78.chunk.js","mappings":"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","sources":["components/CustomerPaymentComponents/CustomerPaymentsList.js","pages/CustomerPaymentsPage/AllCustomerPayments.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { DataGrid } from '@mui/x-data-grid';\n\nconst PAGE_SIZE = 10;\n\nfunction CustomerPaymentsList({ payments }) {\n  const [currentPage, setCurrentPage] = useState(1);\n\n  const startIndex = (currentPage - 1) * PAGE_SIZE;\n  const endIndex = startIndex + PAGE_SIZE;\n  const paginatedPayments = payments.slice(startIndex, endIndex);\n\n  const totalPages = Math.ceil(payments.length / PAGE_SIZE);\n\n  const handlePageChange = (params) => {\n    setCurrentPage(params.page + 1);\n  };\n\n  const columns = [\n    {\n      field: 'payment',\n      headerName: 'Payment',\n      flex: 1,\n      renderCell: (params) => (\n        <Link to={`./${params.row.id}`}>{params.row.id}</Link>\n      ),\n    },\n    {\n      field: 'customer',\n      headerName: 'Customer',\n      flex: 1,\n      valueGetter: (params) =>\n        params.row.receipt.customer.customer_name || '',\n    },\n    {\n      field: 'receiptNumber',\n      headerName: 'Receipt Number',\n      flex: 1,\n      valueGetter: (params) => params.row.receipt.receipt_number || '',\n    },\n    {\n      field: 'approved',\n      headerName: 'Approved',\n      flex: 1,\n      valueGetter: (params) =>\n        params.row.approved === true ? 'approved' : 'Not Approved',\n    },\n    {\n      field: 'paymentDate',\n      headerName: 'Payment Date',\n      flex: 1,\n      valueGetter: (params) => params.row.date || '',\n    },\n    {\n      field: 'receiptDate',\n      headerName: 'Receipt Date',\n      flex: 1,\n      valueGetter: (params) => params.row.receipt.date || '',\n    },\n    {\n      field: 'actions',\n      headerName: 'Actions',\n      flex: 1,\n      renderCell: (params) => (\n        <div className=\"flex\" >\n        <div className=\"pr-2\">\n        <span className=\"inline-flex items-center rounded-md bg-red-50 px-2 py-1 text-xs font-medium text-red-700 ring-1 ring-inset ring-red-600/10\">\n          <Link to={`./${params.row.id}/approve`}>Approve</Link>\n        </span>\n        </div>\n        <div>\n        <span className=\"inline-flex items-center rounded-md bg-blue-50 px-2 py-1 text-xs font-medium text-blue-700 ring-1 ring-inset ring-blue-700/10\">\n          <Link to={`./${params.row.id}/accounting`}>Accounting</Link>\n        </span>\n        </div>\n      </div>\n   \n      ),\n    },\n  ];\n\n  return (\n    <div style={{ height: 400, width: '100%' }}>\n      <h2 className=\"text-lg font-semibold mb-4\">Payments</h2>\n      <DataGrid\n        rows={paginatedPayments}\n        columns={columns}\n        pagination\n        pageSize={PAGE_SIZE}\n        onPageChange={handlePageChange}\n        rowCount={payments.length}\n        paginationMode=\"server\"\n      />\n      {totalPages > 1 && (\n        <div className=\"flex justify-center mt-4\">\n          <nav className=\"inline-flex rounded-md shadow\">\n            <ul className=\"flex\">\n              {Array.from({ length: totalPages }, (_, index) => (\n                <li key={index}>\n                  <button\n                    className={`px-4 py-2 ${\n                      currentPage === index + 1\n                        ? 'bg-gray-900 text-white'\n                        : 'bg-white text-gray-700'\n                    } font-medium`}\n                    onClick={() => setCurrentPage(index + 1)}\n                  >\n                    {index + 1}\n                  </button>\n                </li>\n              ))}\n           </ul>\n          </nav>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default CustomerPaymentsList;","import React, { Suspense } from \"react\";\nimport CustomerPaymentsList from \"../../components/CustomerPaymentComponents/CustomerPaymentsList\";\nimport { getAuthToken } from \"../../util/Auth\";\nimport { Await, defer, json, useRouteLoaderData } from \"react-router-dom\";\n\nfunction AllCustomerPayments() {\n    const {payments} = useRouteLoaderData(\"customer-payments\")\n  return (\n    <Suspense fallback={<p>Loading....</p>}>\n        <Await resolve={payments}>\n        {(loadedPayments) => <CustomerPaymentsList payments={loadedPayments} />}\n        </Await>\n  </Suspense>);\n}\nexport default AllCustomerPayments;\n\nasync function AllCustomerPaymentsLoader() {\n  const token = getAuthToken();\n  const response = await fetch(\"/customer/payment\", {\n    method: \"GET\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n    },\n  });\n\n  if (!response.ok) {\n    throw json({ message: \"No payments loaded\" }, { status: 500 });\n  }\n\n  const resData = await response.json();\n  return resData;\n}\n\nexport async function loader(){\n    return defer({\n        payments : AllCustomerPaymentsLoader()\n    })\n}\n"],"names":["payments","useState","currentPage","setCurrentPage","startIndex","endIndex","paginatedPayments","slice","totalPages","Math","ceil","length","columns","field","headerName","flex","renderCell","params","to","row","id","valueGetter","receipt","customer","customer_name","receipt_number","approved","date","className","style","height","width","DataGrid","rows","pagination","pageSize","onPageChange","page","rowCount","paginationMode","Array","from","_","index","onClick","useRouteLoaderData","Suspense","fallback","Await","resolve","loadedPayments","AllCustomerPaymentsLoader","token","getAuthToken","fetch","method","headers","Authorization","response","ok","json","message","status","resData","loader","defer"],"sourceRoot":""}